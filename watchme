#!/usr/bin/env coffee
# Watcher scripts. Driving me nuts with inotify bollocks
# TODO - Add support for recursive regex matching
# TODO - Add support for live updates of folders
#        This could be done by detecting all folders, hashing
#        a list of all the folders within them and on each change
#        we detect a change in the hash, and refind all subfiles

fs = require 'fs'
path = require 'path'
exec = require('child_process').exec

Array::includes = (e) ->
  for a in this
    return true if a == e
  return false

Array::splitOn = (e) ->
  hit = false; this.reduce ((a,b) ->
    hit ||= (b == e); a[+hit].push b; a), [[],[]]

# Reformat args
args = process.argv[2..]
if args.length is 0
  process.stderr.write 'No given arguments\n'
  process.exit 1
try
  [files, [_, cmds...]] = args.splitOn('-r')
  cmd = cmds.join ' '
  [files, flags] = files.reduce ((a,b) ->
    a[+/^-[^r]$/.test(b)].push b; a), [[],[]]
catch e
  process.stderr.write 'Invalid args\n'
  process.exit 1

# Deals with the regex generation
if flags.includes '-i'
  rexedFiles = []
  for fpath in files
    [dir, rexstr] = [path.dirname(fpath), path.basename(fpath)]
    rex = new RegExp rexstr
    for f in fs.readdirSync dir
      rexedFiles.push path.join(dir, f) if rex.test f
  files = rexedFiles

filesInDir = (dir, includeHidden) ->
  if not fs.statSync(dir).isDirectory() then return [dir]
  dirs = [dir].concat (filesInDir(path.join(dir, f)) for f in fs.readdirSync(dir) when not /^\./.test f)
  return dirs.concat.apply([], dirs)

if flags.includes '-c'
  cmd = "clear; #{cmd}"

running = false
changedFiles = []

# Begin to watch all files
for f in files
  console.log "Watching file: #{f}"
  for target in filesInDir f
    fs.watch target, {interval: 100}, (event, filename) ->
      changedFiles.push filename if filename
      if not running and filename
        running = true; changedFiles = [filename]
        console.log 'Triggered by: ['
        exec "#{cmd}", (err, stdout, stderr) ->
          console.log "#{changedFiles.reduce ((a,c) -> "#{a}    #{c}\n"), ''}]\n"
          process.stdout.write stdout
          if stderr != ''
            process.stdout.write ' >> stderr below'
            process.stderr.write stderr
          setTimeout (-> running = false), 1000
     
